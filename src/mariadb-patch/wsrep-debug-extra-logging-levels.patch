diff --git a/sql/handler.cc b/sql/handler.cc
index 70f1d97..5ca8b61 100644
--- a/sql/handler.cc
+++ b/sql/handler.cc
@@ -1347,6 +1347,9 @@ int ha_commit_trans(THD *thd, bool all)
     */
     if (is_real_trans)
       thd->transaction.cleanup();
+    WSREP_DEBUGX(2,"ha_commit_trans(), no ha_info, thd %lu applier %d exec %d conf %d kill %d",
+                 thd->thread_id, thd->wsrep_applier, thd->wsrep_exec_mode,
+                 thd->wsrep_conflict_state, thd->killed);
     DBUG_RETURN(0);
   }
 
@@ -1363,6 +1366,9 @@ int ha_commit_trans(THD *thd, bool all)
   DBUG_PRINT("info", ("is_real_trans: %d  rw_trans:  %d  rw_ha_count: %d",
                       is_real_trans, rw_trans, rw_ha_count));
 
+  WSREP_DEBUGX(3,"ha_commit_trans(), rw_trans %d, ha_count %d thd %lu applier %d exec %d conf %d kill %d",
+               rw_trans, rw_ha_count, thd->thread_id, thd->wsrep_applier, thd->wsrep_exec_mode,
+               thd->wsrep_conflict_state, thd->killed);
   if (rw_trans)
   {
     /*
@@ -1390,6 +1396,10 @@ int ha_commit_trans(THD *thd, bool all)
 
     DEBUG_SYNC(thd, "ha_commit_trans_after_acquire_commit_lock");
   }
+  else
+  {
+    WSREP_DEBUGX(2,"ha_commit_trans(), non rw_trans");
+  }
 
   if (rw_trans &&
       opt_readonly &&
@@ -1430,6 +1440,9 @@ int ha_commit_trans(THD *thd, bool all)
     if (err)
 #ifdef WITH_WSREP
     {
+      WSREP_DEBUGX(2,"ha_commit_trans(), prepare fail, thd %lu applier %d exec %d conf %d kill %d err %d hton %d",
+                   thd->thread_id, thd->wsrep_applier, thd->wsrep_exec_mode,
+                   thd->wsrep_conflict_state, thd->killed, err, ht->db_type);
       if (WSREP(thd) && ht->db_type== DB_TYPE_WSREP)
       {
         error= 1;
@@ -1488,6 +1501,9 @@ int ha_commit_trans(THD *thd, bool all)
   DBUG_EXECUTE_IF("crash_commit_after_log", DBUG_SUICIDE(););
 
   error= commit_one_phase_2(thd, all, trans, is_real_trans) ? 2 : 0;
+  WSREP_DEBUGX(3,"ha_commit_trans(), commit_one_phase_2 returns %d, thd %lu applier %d exec %d conf %d kill %d",
+               error, thd->thread_id, thd->wsrep_applier, thd->wsrep_exec_mode,
+                 thd->wsrep_conflict_state, thd->killed);
 
   DBUG_EXECUTE_IF("crash_commit_before_unlog", DBUG_SUICIDE(););
   if (tc_log->unlog(cookie, xid))
@@ -1503,6 +1519,9 @@ int ha_commit_trans(THD *thd, bool all)
 
   /* Come here if error and we need to rollback. */
 err:
+  WSREP_DEBUGX(2,"ha_commit_trans(), returns with error, thd %lu applier %d exec %d conf %d kill %d",
+                 thd->thread_id, thd->wsrep_applier, thd->wsrep_exec_mode,
+                 thd->wsrep_conflict_state, thd->killed);
   error= 1;                                  /* Transaction was rolled back */
   /*
     In parallel replication, rollback is delayed, as there is extra replication
@@ -1586,6 +1605,9 @@ commit_one_phase_2(THD *thd, bool all, THD_TRANS *trans, bool is_real_trans)
       {
         my_error(ER_ERROR_DURING_COMMIT, MYF(0), err);
         error=1;
+        WSREP_DEBUGX(2,"commit_one_phase_2(), commit failed, thd %lu applier %d exec %d conf %d kill %d",
+                     thd->thread_id, thd->wsrep_applier, thd->wsrep_exec_mode,
+                     thd->wsrep_conflict_state, thd->killed);
       }
       /* Should this be done only if is_real_trans is set ? */
       status_var_increment(thd->status_var.ha_commit_count);
diff --git a/sql/sys_vars.cc b/sql/sys_vars.cc
index 4d2e35b..d5b0ae8 100644
--- a/sql/sys_vars.cc
+++ b/sql/sys_vars.cc
@@ -4581,9 +4581,10 @@ static Sys_var_charptr Sys_wsrep_dbug_option(
        IN_FS_CHARSET, DEFAULT(""),
        NO_MUTEX_GUARD, NOT_IN_BINLOG);
 
-static Sys_var_mybool Sys_wsrep_debug(
+static Sys_var_int Sys_wsrep_debug(
        "wsrep_debug", "To enable debug level logging",
-       GLOBAL_VAR(wsrep_debug), CMD_LINE(OPT_ARG), DEFAULT(FALSE));
+       GLOBAL_VAR(wsrep_debug), CMD_LINE(OPT_ARG), VALID_RANGE(0,4), DEFAULT(0),
+       BLOCK_SIZE(1));
 
 static Sys_var_mybool Sys_wsrep_convert_LOCK_to_trx(
        "wsrep_convert_LOCK_to_trx", "To convert locking sessions "
diff --git a/sql/transaction.cc b/sql/transaction.cc
index f478b4a..0cb8300 100644
--- a/sql/transaction.cc
+++ b/sql/transaction.cc
@@ -226,6 +226,9 @@ bool trans_commit(THD *thd)
 {
   int res;
   DBUG_ENTER("trans_commit");
+  WSREP_DEBUGX(3,"trans_commit(), thd %lu applier %d exec %d conf %d kill %d",
+               thd->thread_id, thd->wsrep_applier, thd->wsrep_exec_mode,
+               thd->wsrep_conflict_state, thd->killed);
 
   if (trans_check(thd))
     DBUG_RETURN(TRUE);
diff --git a/sql/wsrep_applier.cc b/sql/wsrep_applier.cc
index 4d95b38..49d8213 100644
--- a/sql/wsrep_applier.cc
+++ b/sql/wsrep_applier.cc
@@ -126,6 +126,7 @@ static wsrep_cb_status_t wsrep_apply_events(THD*        thd,
     }
 
     typ= ev->get_type_code();
+    WSREP_DEBUGX(3,"wsrep_apply_events(), event type: %d", typ);
 
     switch (typ) {
     case FORMAT_DESCRIPTION_EVENT:
@@ -267,6 +268,7 @@ wsrep_cb_status_t wsrep_apply_cb(void* const             ctx,
   {
     wsrep_dump_rbr_buf(thd, buf, buf_len);
   }
+  WSREP_DEBUGX(3,"wsrep_apply_cb(), rcode %d WS buf: %lu", rcode, buf_len);
 
   TABLE *tmp;
   while ((tmp = thd->temporary_tables))
@@ -294,7 +296,7 @@ static wsrep_cb_status_t wsrep_commit(THD* const thd,
 
   wsrep_cb_status_t const rcode(trans_commit(thd) ?
                                 WSREP_CB_FAILURE : WSREP_CB_SUCCESS);
-
+  WSREP_DEBUGX(3,"wsrep_commit(), trans_commit returned with %d", rcode);
   if (WSREP_CB_SUCCESS == rcode)
   {
     thd->wsrep_rgi->cleanup_context(thd, false);
diff --git a/sql/wsrep_hton.cc b/sql/wsrep_hton.cc
index c096d26..858bd9a 100644
--- a/sql/wsrep_hton.cc
+++ b/sql/wsrep_hton.cc
@@ -126,7 +126,6 @@ void wsrep_post_commit(THD* thd, bool all)
      /*
        Non-InnoDB statements may have populated events in stmt cache => cleanup
      */
-     WSREP_DEBUG("cleanup transaction for LOCAL_STATE: %s", thd->query());
      wsrep_cleanup_transaction(thd);
      break;
    }
diff --git a/sql/wsrep_mysqld.cc b/sql/wsrep_mysqld.cc
index 31a642e..fc980b2 100644
--- a/sql/wsrep_mysqld.cc
+++ b/sql/wsrep_mysqld.cc
@@ -46,7 +46,7 @@ const char* wsrep_dbug_option   = "";
 
 long    wsrep_slave_threads            = 1; // # of slave action appliers wanted
 int     wsrep_slave_count_change       = 0; // # of appliers to stop or start
-my_bool wsrep_debug                    = 0; // enable debug level logging
+int wsrep_debug                    = 0; // enable debug level logging
 my_bool wsrep_convert_LOCK_to_trx      = 1; // convert locking sessions to trx
 ulong   wsrep_retry_autocommit         = 5; // retry aborted autocommit trx
 my_bool wsrep_auto_increment_control   = 1; // control auto increment variables
diff --git a/sql/wsrep_mysqld.h b/sql/wsrep_mysqld.h
index 4e0d2f4..e8eef35 100644
--- a/sql/wsrep_mysqld.h
+++ b/sql/wsrep_mysqld.h
@@ -82,7 +82,7 @@ extern const char* wsrep_data_home_dir;
 extern const char* wsrep_dbug_option;
 extern long        wsrep_slave_threads;
 extern int         wsrep_slave_count_change;
-extern MYSQL_PLUGIN_IMPORT my_bool wsrep_debug;
+extern MYSQL_PLUGIN_IMPORT int wsrep_debug;
 extern my_bool     wsrep_convert_LOCK_to_trx;
 extern ulong       wsrep_retry_autocommit;
 extern my_bool     wsrep_auto_increment_control;
@@ -226,6 +226,8 @@ extern wsrep_seqno_t wsrep_locked_seqno;
 #define WSREP_INFO(...)  WSREP_LOG(sql_print_information, ##__VA_ARGS__)
 #define WSREP_WARN(...)  WSREP_LOG(sql_print_warning,     ##__VA_ARGS__)
 #define WSREP_ERROR(...) WSREP_LOG(sql_print_error,       ##__VA_ARGS__)
+#define WSREP_DEBUGX(level, ...)                                         \
+    if (wsrep_debug >= level)     WSREP_LOG(sql_print_information, ##__VA_ARGS__)
 
 #define WSREP_LOG_CONFLICT_THD(thd, role)                                      \
     WSREP_LOG(sql_print_information, 	                                       \
diff --git a/storage/xtradb/handler/ha_innodb.cc b/storage/xtradb/handler/ha_innodb.cc
index 886a3ef..5b6aa07 100644
--- a/storage/xtradb/handler/ha_innodb.cc
+++ b/storage/xtradb/handler/ha_innodb.cc
@@ -4061,6 +4061,9 @@ innobase_commit_low(
 #ifdef WITH_WSREP
 	THD* thd = (THD*)trx->mysql_thd;
 	const char* tmp = 0;
+        WSREP_DEBUGX(3,"innobase_commit_low(), thd %lu",
+                     wsrep_thd_thread_id(trx->mysql_thd));
+
 	if (wsrep_on((void*)thd)) {
 #ifdef WSREP_PROC_INFO
 		char info[64];
@@ -4184,6 +4187,8 @@ innobase_commit_ordered_2(
 	THD*	thd)	/*!< in: MySQL thread handle */
 {
 	DBUG_ENTER("innobase_commit_ordered_2");
+        WSREP_DEBUGX(3,"innobase_commit_ordered_2(), thd %lu concurrency %lu",
+                     wsrep_thd_thread_id(trx->mysql_thd), innobase_commit_concurrency);
 
 	/* We need current binlog position for mysqlbackup to work. */
 retry:
@@ -4408,6 +4413,8 @@ innobase_commit(
 	DBUG_PRINT("trans", ("ending transaction"));
 
 	trx = check_trx_exists(thd);
+        WSREP_DEBUGX(3,"innobase_commit(), thd %lu commit %d",
+                     wsrep_thd_thread_id(trx->mysql_thd), commit_trx);
 
 	/* Since we will reserve the trx_sys->mutex, we have to release
 	the search system latch first to obey the latching order. */
@@ -4507,6 +4514,8 @@ innobase_rollback(
 	DBUG_PRINT("trans", ("aborting transaction"));
 
 	trx = check_trx_exists(thd);
+        WSREP_DEBUGX(3,"innobase_rollback(), thd %lu",
+                     wsrep_thd_thread_id(trx->mysql_thd));
 
 	/* Release a possible FIFO ticket and search latch. Since we will
 	reserve the trx_sys->mutex, we have to release the search system
diff --git a/storage/xtradb/trx/trx0trx.cc b/storage/xtradb/trx/trx0trx.cc
index b69e8ae..fbc7e6a 100644
--- a/storage/xtradb/trx/trx0trx.cc
+++ b/storage/xtradb/trx/trx0trx.cc
@@ -50,7 +50,9 @@ Created 3/26/1996 Heikki Tuuri
 #include "ut0vec.h"
 
 #include<set>
-
+#ifdef WITH_WSREP
+#include <wsrep_mysqld.h>
+#endif
 extern "C"
 int thd_deadlock_victim_preference(const MYSQL_THD thd1, const MYSQL_THD thd2);
 
@@ -1391,6 +1393,9 @@ trx_commit_in_memory(
 			if the transaction did not modify anything */
 {
 	trx->must_flush_log_later = FALSE;
+        if (wsrep_debug > 2) fprintf(stderr,
+                                     "trx_commit_in_memory(), thd %lu lsn %lu \n",
+                                     wsrep_thd_thread_id(trx->mysql_thd), lsn);
 
 	if (trx_is_autocommit_non_locking(trx)) {
 		ut_ad(trx->read_only);
@@ -1586,6 +1591,9 @@ trx_commit_low(
 			or NULL if trx made no modifications */
 {
 	lsn_t	lsn;
+        if (wsrep_debug > 2) fprintf(stderr,
+                                     "trx_commit_low(), thd %lu \n",
+                                     wsrep_thd_thread_id(trx->mysql_thd));
 
 	assert_trx_nonlocking_or_in_list(trx);
 	ut_ad(!trx_state_eq(trx, TRX_STATE_COMMITTED_IN_MEMORY));
@@ -1904,6 +1912,9 @@ trx_commit_for_mysql(
 	started. */
 
 	ut_a(trx);
+        if (wsrep_debug > 2) fprintf(stderr,
+                                     "trx_commit_for_mysql(), thd %lu \n",
+                                     wsrep_thd_thread_id(trx->mysql_thd));
 
 	switch (trx->state) {
 	case TRX_STATE_NOT_STARTED:
@@ -1920,6 +1931,10 @@ trx_commit_for_mysql(
 
 		ut_d(trx->start_file = __FILE__);
 		ut_d(trx->start_line = __LINE__);
+                if (wsrep_debug > 1)
+                  fprintf(stderr,
+                          "trx_commit_for_mysql(), started trx, thd %lu \n",
+                          wsrep_thd_thread_id(trx->mysql_thd));
 
 		trx_start_low(trx);
 		/* fall through */
