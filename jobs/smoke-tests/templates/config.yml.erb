<%=

  mysql_service = nil
  if_p('cf_mysql.broker.services') do |s|
    mysql_service = s.first
  end

if ! p('cf_mysql.smoke_tests.standalone_tests_only') then
  raise "services must be non-empty if standalone_tests_only is true" unless mysql_service
  raise "plans must be non-empty if standalone_tests_only is true" unless mysql_service['plans']
end

proxy_ips = nil
if_p('cf_mysql.proxy.proxy_ips') do |ips|
  # proxy_ips may contain nil values due to lack of flexibility in spiff
  proxy_ips = ips.compact
end.else do
  proxy_ips= link('proxy').instances.map { |instance| instance.address }
end

proxy_urls = proxy_ips.each_with_index.map do |_, index|
  "https://proxy-#{index}-#{p('cf_mysql.external_host')}"
end

apps_domain=nil
if_p('cf.app_domains') do |domains|
  apps_domain=domains.first
end

service_name = mysql_service ? mysql_service['name'] : ''

config = {
  api:                 p('cf.api_url'),
  apps_domain:         apps_domain,
  admin_user:          p('cf.admin_username'),
  admin_password:      p('cf.admin_password'),
  test_password:       p('cf_mysql.smoke_tests.password'),
  broker_host:         p('cf_mysql.external_host'),
  service_name:        service_name,
  skip_ssl_validation: p('cf.skip_ssl_validation'),
  proxy: {
    dashboard_urls:      proxy_urls,
    api_username:        p('cf_mysql.proxy.api_username'),
    api_password:        p('cf_mysql.proxy.api_password'),
    api_force_https:     p('cf_mysql.proxy.api_force_https'),
    skip_ssl_validation: p('cf.skip_ssl_validation'),
  }
}

if_p('cf.smoke_tests.use_existing_org') do
  config[:org_name] = p('cf.smoke_tests.org')
end

default_max_user_connections = 40
if mysql_service && mysql_service['max_user_connections_default'] then
  default_max_user_connections = mysql_service['max_user_connections_default']
end

if mysql_service then
  config[:plans] = mysql_service['plans'].map do | plan |
    {
      plan_name:            plan['name'],
      private:              plan.has_key?('private') ? plan['private'] : false,
      max_storage_mb:       plan['max_storage_mb'],
      max_user_connections: plan['max_user_connections'] || default_max_user_connections
    }
  end
end

standalone_tests_only = p('cf_mysql.smoke_tests.standalone_tests_only')
config[:standalone_only] = standalone_tests_only

if standalone_tests_only then
  cluster_ips = nil
  if_p('cf_mysql.mysql.cluster_ips') do |ips|
    # cluster_ips may contain nil values due to lack of flexibility in spiff
    cluster_ips = ips.compact

    # do not route traffic to arbitrator
    if_p('cf_mysql.proxy.arbitrator_ip') do |arbitrator_ip|
      cluster_ips.delete(arbitrator_ip)
    end
  end.else do
    cluster_ips = link('mysql').instances.map { |instance| instance.address }
  end

  mysql_host = nil
  if_p('cf_mysql.host') do |host|
    mysql_host = host
  end.else do
    mysql_host = cluster_ips.first
  end

  raise "could not determine mysql host for standalone tests" unless mysql_host

  config[:standalone] = {
    host:     mysql_host,
    port:     p('cf_mysql.mysql.port'),
    username: p('cf_mysql.mysql.admin_username'),
    password: p('cf_mysql.mysql.admin_password')
  }
end

JSON.pretty_generate(config)

%>
