<%=
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    _, network = networks.first unless network

    raise "Could not determine IP via network spec: #{networks}" unless network

    network.ip
  end
  my_ip = discover_external_ip

  if_p('cf_mysql.broker.host') do |host_ip|
    my_ip = host_ip
  end

  message_bus_servers = p('nats.machines').map do |ip|
    {
      host: "#{ip}:#{p('nats.port')}",
      user: p('nats.user'),
      password: p('nats.password')
    }
  end

  config = {
   message_bus_servers: message_bus_servers,
   host: my_ip,
   routes: [
     {
       name: "broker_#{index}",
       port: p('cf_mysql.broker.port'),
       uris: [
         p('cf_mysql.external_host')
       ],
       registration_interval: '10s',
       health_check: {
         name: 'script',
         script_path: '/var/vcap/jobs/cf-mysql-broker/bin/healthcheck.sh'
       }
     }
   ]
  }

  JSON.pretty_generate(config)
%>
