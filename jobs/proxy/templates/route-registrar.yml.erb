<%=
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    _, network = networks.first unless network

    raise "Could not determine IP via network spec: #{networks}" unless network

    network.ip
  end
  my_ip = discover_external_ip

  proxy_ips = nil
  if_link('proxy') do
    proxy_ips= link('proxy').instances.map { |instance| instance.address }
  end.else do
    proxy_ips = p('cf_mysql.proxy.proxy_ips').compact
  end

  proxy_index = proxy_ips.index(my_ip)

  if ! p('cf_mysql.standalone')
    message_bus_servers = p('nats.machines').map do |ip|
      {
        host: "#{ip}:#{p('nats.port')}",
        user: p('nats.user'),
        password: p('nats.password')
      }
    end

    config = {
     message_bus_servers: message_bus_servers,
     host: my_ip,
     routes: [
       {
         name: "proxy_#{proxy_index}",
         port: p('cf_mysql.proxy.api_port'),
         uris: [
           "proxy-#{proxy_index}-#{p('cf_mysql.external_host')}"
         ],
         registration_interval: '10s',
       }
     ]
    }

    JSON.pretty_generate(config)
  end
%>
